/*
 * LeetCode: 21
 * Problem: Merge Two Sorted Lists
 * Link: https://leetcode.com/problems/merge-two-sorted-lists/
 *
 * Approach:
 * - Use two pointers to iterate through both input lists.
 * - Compare the current nodes of both lists and append the smaller one to the result list.
 * - Continue until one list is exhausted, then append the rest of the other list.
 * - Return the merged list starting from the head.
 *
 * Time Complexity: O(n + m) — where n and m are the lengths of the two lists
 * Space Complexity: O(1) — no extra space used apart from the output list
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

Solution
--
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        // Edge cases
        if (list1 == null) return list2;
        if (list2 == null) return list1;

        // Initialize the merged list head
        ListNode head;
        if (list1.val <= list2.val) {
            head = list1;
            list1 = list1.next;
        } else {
            head = list2;
            list2 = list2.next;
        }

        // Current pointer for building the merged list
        ListNode temp = head;

        // Traverse both lists and merge
        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                temp.next = list1;
                list1 = list1.next;
            } else {
                temp.next = list2;
                list2 = list2.next;
            }
            temp = temp.next;
        }

        // Append the remaining part of whichever list is not empty
        temp.next = (list1 == null) ? list2 : list1;

        return head;
    }
}
--
