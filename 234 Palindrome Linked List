/*
 * LeetCode: 234
 * Problem: Palindrome Linked List
 * Link: https://leetcode.com/problems/palindrome-linked-list/
 *
 * Approach:
 * - Use two pointers (slow and fast) to find the middle of the list.
 * - Reverse the second half of the list.
 * - Compare values from the first half and reversed second half.
 * - If all corresponding values match, itâ€™s a palindrome.
 *
 * Time Complexity: O(n)
 * Space Complexity: O(1) - in-place reverse
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

Solution
--
class Solution {

    // Helper method to reverse a linked list
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while (curr != null) {
            ListNode next = curr.next;  // temporarily store the next node
            curr.next = prev;           // reverse current node's pointer
            prev = curr;                // move prev and curr one step forward
            curr = next;
        }
        return prev; // new head of the reversed list
    }

    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) return true;

        // Step 1: Find the middle node using slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the list
        ListNode secondHalfHead = reverse(slow);

        // Step 3: Compare both halves
        ListNode firstHalf = head;
        while (secondHalfHead != null) {
            if (firstHalf.val != secondHalfHead.val) {
                return false; // Mismatch found
            }
            firstHalf = firstHalf.next;
            secondHalfHead = secondHalfHead.next;
        }

        return true; // All values matched; it is a palindrome
    }
}
--
