/*
 * LeetCode: 61
 * Problem: Rotate List
 * Link: https://leetcode.com/problems/rotate-list/
 *
 * Approach:
 * - First, calculate the length of the linked list.
 * - Normalize k using modulo (k = k % length) to avoid redundant full rotations.
 * - Reverse the entire list.
 * - Split the reversed list into two parts: first k nodes and the rest.
 * - Reverse both parts individually.
 * - Connect the two reversed parts to get the final rotated list.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

SOlution
--
class Solution {
    // Utility to reverse a linked list
    public ListNode reverse(ListNode head){
        ListNode curr = head;
        ListNode prev = null;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    // Utility to compute length of the linked list
    public int getLength(ListNode head){
        int length = 0;
        while(head != null){
            length++;
            head = head.next;
        }
        return length;
    }

    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0) return head;

        int length = getLength(head);
        k = k % length;
        if(k == 0) return head;

        // Step 1: Reverse the entire list
        head = reverse(head);

        // Step 2: Split after k nodes
        ListNode temp = head;
        int count = 1;
        while(count < k && temp != null){
            temp = temp.next;
            count++;
        }

        ListNode firstPart = head;
        ListNode secondPart = null;

        if(temp != null){
            secondPart = temp.next;
            temp.next = null;
        }

        // Step 3: Reverse both parts individually
        firstPart = reverse(firstPart);
        secondPart = reverse(secondPart);

        // Step 4: Attach the two parts
        ListNode tail = firstPart;
        while(tail.next != null){
            tail = tail.next;
        }
        tail.next = secondPart;

        return firstPart;
    }
}
--
