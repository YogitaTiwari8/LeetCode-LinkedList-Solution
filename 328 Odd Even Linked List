// LeetCode: 328
// Problem name: Odd Even Linked List
// https://leetcode.com/problems/odd-even-linked-list/
// Approach:
// - Separate nodes into odd and even based on their position (1-based indexing)
// - Use two pointers: one for odd (`tempOdd`) and one for even (`tempEven`)
// - Rearrange pointers to form two separate lists and connect odd list to even list
// - Return the modified head

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

Solution
--
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null) {
            return head;
        }

        ListNode odd = head;
        ListNode even = head.next;

        ListNode tempOdd = odd;
        ListNode tempEven = even;

        // Separate the nodes into odd and even indexed lists
        while (tempEven != null && tempEven.next != null) {
            tempOdd.next = tempEven.next;
            tempOdd = tempOdd.next;

            tempEven.next = tempOdd.next;
            tempEven = tempEven.next;
        }

        // Connect the last node of odd list to head of even list
        tempOdd.next = even;

        return head;
    }
}
--
