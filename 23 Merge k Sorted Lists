// LeetCode: 23
// Problem name: Merge k Sorted Lists
// https://leetcode.com/problems/merge-k-sorted-lists/
// Approach:
// - Use a helper method `merge()` to merge two sorted linked lists
// - Iteratively merge each list into the first list (lists[0])
// - Return merged result at the end
// - Time: O(kN), where k = number of lists, N = total nodes

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

Solution
--
class Solution {

    // Helper to merge two sorted linked lists
    public ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                curr.next = list1;
                list1 = list1.next;
            } else {
                curr.next = list2;
                list2 = list2.next;
            }
            curr = curr.next;
        }

        // Append the remaining nodes
        curr.next = (list1 == null) ? list2 : list1;

        return dummy.next;
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) return null;

        int i = 1;
        while (i < lists.length) {
            lists[0] = merge(lists[0], lists[i]);
            i++;
        }

        return lists[0];
    }
}
--
